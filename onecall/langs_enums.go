// DO NOT EDIT.
// code generated by goenums v0.4.3 at Aug  2 14:44:08.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums lang.go

package onecall

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"

	"golang.org/x/exp/constraints"
)

// Lang is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type Lang struct {
	lang
}

// langsContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the Lang type.
type langsContainer struct {
	UNKNOWNLANG Lang
	ENGLISH     Lang
	SPANISH     Lang
	SWEDISH     Lang
}

// Langs is a main entry point using the Lang type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var Langs = langsContainer{
	UNKNOWNLANG: Lang{
		lang: unknownLang,
	},
	ENGLISH: Lang{
		lang: English,
	},
	SPANISH: Lang{
		lang: Spanish,
	},
	SWEDISH: Lang{
		lang: Swedish,
	},
}

// invalidLang is an invalid sentinel value for Lang
var invalidLang = Lang{
	lang: -1,
}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (l langsContainer) allSlice() []Lang {
	return []Lang{
		Langs.ENGLISH,
		Langs.SPANISH,
		Langs.SWEDISH,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (l langsContainer) All() iter.Seq[Lang] {
	return func(yield func(Lang) bool) {
		for _, v := range l.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseLang parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseLang(input any) (Lang, error) {
	switch v := input.(type) {
	case Lang:
		return v, nil
	case string:
		if result := stringToLang(v); result != nil {
			return *result, nil
		}
	case fmt.Stringer:
		if result := stringToLang(v.String()); result != nil {
			return *result, nil
		}
	case []byte:
		if result := stringToLang(string(v)); result != nil {
			return *result, nil
		}
	case int:
		if result := numberToLang(v); result != nil {
			return *result, nil
		}
	case int8:
		if result := numberToLang(v); result != nil {
			return *result, nil
		}
	case int16:
		if result := numberToLang(v); result != nil {
			return *result, nil
		}
	case int32:
		if result := numberToLang(v); result != nil {
			return *result, nil
		}
	case int64:
		if result := numberToLang(v); result != nil {
			return *result, nil
		}
	case uint:
		if result := numberToLang(v); result != nil {
			return *result, nil
		}
	case uint8:
		if result := numberToLang(v); result != nil {
			return *result, nil
		}
	case uint16:
		if result := numberToLang(v); result != nil {
			return *result, nil
		}
	case uint32:
		if result := numberToLang(v); result != nil {
			return *result, nil
		}
	case uint64:
		if result := numberToLang(v); result != nil {
			return *result, nil
		}
	case float32:
		if result := numberToLang(v); result != nil {
			return *result, nil
		}
	case float64:
		if result := numberToLang(v); result != nil {
			return *result, nil
		}
	default:
		return invalidLang, fmt.Errorf("invalid type %T", input)
	}
	return invalidLang, nil
}

// langsNameMap is a map of enum values to their Lang representation
// It is used to convert string representations of enum values into their Lang representation.
var langsNameMap = map[string]Lang{
	"unknownLang": Langs.UNKNOWNLANG,
	"en":          Langs.ENGLISH,
	"sp":          Langs.SPANISH,
	"sv":          Langs.SWEDISH,
}

// stringToLang converts a string representation of an enum value into its Lang representation
// It returns a pointer to the Lang representation of the enum value if the string is valid
// Otherwise, it returns nil
func stringToLang(s string) *Lang {
	if t, ok := langsNameMap[s]; ok {
		return &t
	}
	return nil
}

// numberToLang converts a numeric value to a Lang
// It returns a pointer to the Lang representation of the enum value if the numeric value is valid
// Otherwise, it returns nil
func numberToLang[T constraints.Integer | constraints.Float](num T) *Lang {
	f := float64(num)
	if math.Floor(f) != f {
		return nil
	}
	i := int(f)
	if i <= 0 || i > len(Langs.allSlice()) {
		return nil
	}
	result := Langs.allSlice()[i-1]
	if !result.IsValid() {
		return nil
	}
	return &result
}

// ExhaustiveLangs iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveLangs(f func(Lang)) {
	for _, p := range Langs.allSlice() {
		f(p)
	}
}

// validLangs is a map of enum values to their validity
var validLangs = map[Lang]bool{
	Langs.UNKNOWNLANG: false,
	Langs.ENGLISH:     true,
	Langs.SPANISH:     true,
	Langs.SWEDISH:     true,
}

// IsValid checks whether the Langs value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (l Lang) IsValid() bool {
	return validLangs[l]
}

// MarshalJSON implements the json.Marshaler interface for Lang.
// It returns the JSON representation of the enum value as a byte slice.
func (l Lang) MarshalJSON() ([]byte, error) {
	return []byte("\"" + l.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for Lang.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (l *Lang) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newl, err := ParseLang(b)
	if err != nil {
		return err
	}
	*l = newl
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Lang.
// It returns the string representation of the enum value as a byte slice
func (l Lang) MarshalText() ([]byte, error) {
	return []byte("\"" + l.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Lang.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (l *Lang) UnmarshalText(b []byte) error {
	newl, err := ParseLang(b)
	if err != nil {
		return err
	}
	*l = newl
	return nil
}

// Scan implements the database/sql.Scanner interface for Lang.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (l *Lang) Scan(value any) error {
	newl, err := ParseLang(value)
	if err != nil {
		return err
	}
	*l = newl
	return nil
}

// Value implements the database/sql/driver.Valuer interface for Lang.
// It returns the string representation of the enum value.
func (l Lang) Value() (driver.Value, error) {
	return l.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Lang.
// It returns the binary representation of the enum value as a byte slice.
func (l Lang) MarshalBinary() ([]byte, error) {
	return []byte("\"" + l.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Lang.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (l *Lang) UnmarshalBinary(b []byte) error {
	newl, err := ParseLang(b)
	if err != nil {
		return err
	}
	*l = newl
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for Lang.
// It returns the string representation of the enum value.
func (l Lang) MarshalYAML() ([]byte, error) {
	return []byte(l.String()), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Planet.
// It parses the byte slice representation of the enum value and returns an error
// if the YAML byte slice does not contain a valid enum value.
func (l *Lang) UnmarshalYAML(b []byte) error {
	newl, err := ParseLang(b)
	if err != nil {
		return err
	}
	*l = newl
	return nil
}

// langNames is a constant string slice containing all enum values cononical absolute names
const langNames = "unknownLangenspsv"

// langNamesMap is a map of enum values to their canonical absolute
// name positions within the langNames string slice
var langNamesMap = map[Lang]string{
	Langs.UNKNOWNLANG: langNames[0:11],
	Langs.ENGLISH:     langNames[11:13],
	Langs.SPANISH:     langNames[13:15],
	Langs.SWEDISH:     langNames[15:17],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (l Lang) String() string {
	if str, ok := langNamesMap[l]; ok {
		return str
	}
	return fmt.Sprintf("lang(%d)", l.lang)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [4]struct{}
	_ = x[unknownLang]
	_ = x[English-1]
	_ = x[Spanish-2]
	_ = x[Swedish-3]
}
