// DO NOT EDIT.
// code generated by goenums v0.4.3 at Aug  2 14:44:08.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums unit.go

package onecall

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"

	"golang.org/x/exp/constraints"
)

// Unit is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type Unit struct {
	unit
}

// unitsContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the Unit type.
type unitsContainer struct {
	UNKNOWNUNIT Unit
	STANDARD    Unit
	METRIC      Unit
	IMPERIAL    Unit
}

// Units is a main entry point using the Unit type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var Units = unitsContainer{
	UNKNOWNUNIT: Unit{
		unit: unknownUnit,
	},
	STANDARD: Unit{
		unit: standard,
	},
	METRIC: Unit{
		unit: metric,
	},
	IMPERIAL: Unit{
		unit: imperial,
	},
}

// invalidUnit is an invalid sentinel value for Unit
var invalidUnit = Unit{
	unit: -1,
}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (u unitsContainer) allSlice() []Unit {
	return []Unit{
		Units.STANDARD,
		Units.METRIC,
		Units.IMPERIAL,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (u unitsContainer) All() iter.Seq[Unit] {
	return func(yield func(Unit) bool) {
		for _, v := range u.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseUnit parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseUnit(input any) (Unit, error) {
	switch v := input.(type) {
	case Unit:
		return v, nil
	case string:
		if result := stringToUnit(v); result != nil {
			return *result, nil
		}
	case fmt.Stringer:
		if result := stringToUnit(v.String()); result != nil {
			return *result, nil
		}
	case []byte:
		if result := stringToUnit(string(v)); result != nil {
			return *result, nil
		}
	case int:
		if result := numberToUnit(v); result != nil {
			return *result, nil
		}
	case int8:
		if result := numberToUnit(v); result != nil {
			return *result, nil
		}
	case int16:
		if result := numberToUnit(v); result != nil {
			return *result, nil
		}
	case int32:
		if result := numberToUnit(v); result != nil {
			return *result, nil
		}
	case int64:
		if result := numberToUnit(v); result != nil {
			return *result, nil
		}
	case uint:
		if result := numberToUnit(v); result != nil {
			return *result, nil
		}
	case uint8:
		if result := numberToUnit(v); result != nil {
			return *result, nil
		}
	case uint16:
		if result := numberToUnit(v); result != nil {
			return *result, nil
		}
	case uint32:
		if result := numberToUnit(v); result != nil {
			return *result, nil
		}
	case uint64:
		if result := numberToUnit(v); result != nil {
			return *result, nil
		}
	case float32:
		if result := numberToUnit(v); result != nil {
			return *result, nil
		}
	case float64:
		if result := numberToUnit(v); result != nil {
			return *result, nil
		}
	default:
		return invalidUnit, fmt.Errorf("invalid type %T", input)
	}
	return invalidUnit, nil
}

// unitsNameMap is a map of enum values to their Unit representation
// It is used to convert string representations of enum values into their Unit representation.
var unitsNameMap = map[string]Unit{
	"unknownUnit": Units.UNKNOWNUNIT,
	"standard":    Units.STANDARD,
	"metric":      Units.METRIC,
	"imperial":    Units.IMPERIAL,
}

// stringToUnit converts a string representation of an enum value into its Unit representation
// It returns a pointer to the Unit representation of the enum value if the string is valid
// Otherwise, it returns nil
func stringToUnit(s string) *Unit {
	if t, ok := unitsNameMap[s]; ok {
		return &t
	}
	return nil
}

// numberToUnit converts a numeric value to a Unit
// It returns a pointer to the Unit representation of the enum value if the numeric value is valid
// Otherwise, it returns nil
func numberToUnit[T constraints.Integer | constraints.Float](num T) *Unit {
	f := float64(num)
	if math.Floor(f) != f {
		return nil
	}
	i := int(f)
	if i <= 0 || i > len(Units.allSlice()) {
		return nil
	}
	result := Units.allSlice()[i-1]
	if !result.IsValid() {
		return nil
	}
	return &result
}

// ExhaustiveUnits iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveUnits(f func(Unit)) {
	for _, p := range Units.allSlice() {
		f(p)
	}
}

// validUnits is a map of enum values to their validity
var validUnits = map[Unit]bool{
	Units.UNKNOWNUNIT: false,
	Units.STANDARD:    true,
	Units.METRIC:      true,
	Units.IMPERIAL:    true,
}

// IsValid checks whether the Units value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (u Unit) IsValid() bool {
	return validUnits[u]
}

// MarshalJSON implements the json.Marshaler interface for Unit.
// It returns the JSON representation of the enum value as a byte slice.
func (u Unit) MarshalJSON() ([]byte, error) {
	return []byte("\"" + u.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for Unit.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (u *Unit) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newu, err := ParseUnit(b)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Unit.
// It returns the string representation of the enum value as a byte slice
func (u Unit) MarshalText() ([]byte, error) {
	return []byte("\"" + u.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Unit.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (u *Unit) UnmarshalText(b []byte) error {
	newu, err := ParseUnit(b)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// Scan implements the database/sql.Scanner interface for Unit.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (u *Unit) Scan(value any) error {
	newu, err := ParseUnit(value)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// Value implements the database/sql/driver.Valuer interface for Unit.
// It returns the string representation of the enum value.
func (u Unit) Value() (driver.Value, error) {
	return u.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Unit.
// It returns the binary representation of the enum value as a byte slice.
func (u Unit) MarshalBinary() ([]byte, error) {
	return []byte("\"" + u.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Unit.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (u *Unit) UnmarshalBinary(b []byte) error {
	newu, err := ParseUnit(b)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for Unit.
// It returns the string representation of the enum value.
func (u Unit) MarshalYAML() ([]byte, error) {
	return []byte(u.String()), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Planet.
// It parses the byte slice representation of the enum value and returns an error
// if the YAML byte slice does not contain a valid enum value.
func (u *Unit) UnmarshalYAML(b []byte) error {
	newu, err := ParseUnit(b)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// unitNames is a constant string slice containing all enum values cononical absolute names
const unitNames = "unknownUnitstandardmetricimperial"

// unitNamesMap is a map of enum values to their canonical absolute
// name positions within the unitNames string slice
var unitNamesMap = map[Unit]string{
	Units.UNKNOWNUNIT: unitNames[0:11],
	Units.STANDARD:    unitNames[11:19],
	Units.METRIC:      unitNames[19:25],
	Units.IMPERIAL:    unitNames[25:33],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (u Unit) String() string {
	if str, ok := unitNamesMap[u]; ok {
		return str
	}
	return fmt.Sprintf("unit(%d)", u.unit)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [4]struct{}
	_ = x[unknownUnit]
	_ = x[standard-1]
	_ = x[metric-2]
	_ = x[imperial-3]
}
