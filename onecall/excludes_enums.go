// DO NOT EDIT.
// code generated by goenums v0.4.3 at Aug  2 14:44:08.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums exclude.go

package onecall

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"

	"golang.org/x/exp/constraints"
)

// Exclude is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type Exclude struct {
	exclude
}

// excludesContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the Exclude type.
type excludesContainer struct {
	UNKNOWNEXCLUDE Exclude
	CURRENT        Exclude
	MINUTELY       Exclude
	HOURLY         Exclude
	DAILY          Exclude
	ALERTS         Exclude
}

// Excludes is a main entry point using the Exclude type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var Excludes = excludesContainer{
	UNKNOWNEXCLUDE: Exclude{
		exclude: unknownExclude,
	},
	CURRENT: Exclude{
		exclude: current,
	},
	MINUTELY: Exclude{
		exclude: minutely,
	},
	HOURLY: Exclude{
		exclude: hourly,
	},
	DAILY: Exclude{
		exclude: daily,
	},
	ALERTS: Exclude{
		exclude: alerts,
	},
}

// invalidExclude is an invalid sentinel value for Exclude
var invalidExclude = Exclude{
	exclude: -1,
}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (e excludesContainer) allSlice() []Exclude {
	return []Exclude{
		Excludes.CURRENT,
		Excludes.MINUTELY,
		Excludes.HOURLY,
		Excludes.DAILY,
		Excludes.ALERTS,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (e excludesContainer) All() iter.Seq[Exclude] {
	return func(yield func(Exclude) bool) {
		for _, v := range e.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseExclude parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseExclude(input any) (Exclude, error) {
	switch v := input.(type) {
	case Exclude:
		return v, nil
	case string:
		if result := stringToExclude(v); result != nil {
			return *result, nil
		}
	case fmt.Stringer:
		if result := stringToExclude(v.String()); result != nil {
			return *result, nil
		}
	case []byte:
		if result := stringToExclude(string(v)); result != nil {
			return *result, nil
		}
	case int:
		if result := numberToExclude(v); result != nil {
			return *result, nil
		}
	case int8:
		if result := numberToExclude(v); result != nil {
			return *result, nil
		}
	case int16:
		if result := numberToExclude(v); result != nil {
			return *result, nil
		}
	case int32:
		if result := numberToExclude(v); result != nil {
			return *result, nil
		}
	case int64:
		if result := numberToExclude(v); result != nil {
			return *result, nil
		}
	case uint:
		if result := numberToExclude(v); result != nil {
			return *result, nil
		}
	case uint8:
		if result := numberToExclude(v); result != nil {
			return *result, nil
		}
	case uint16:
		if result := numberToExclude(v); result != nil {
			return *result, nil
		}
	case uint32:
		if result := numberToExclude(v); result != nil {
			return *result, nil
		}
	case uint64:
		if result := numberToExclude(v); result != nil {
			return *result, nil
		}
	case float32:
		if result := numberToExclude(v); result != nil {
			return *result, nil
		}
	case float64:
		if result := numberToExclude(v); result != nil {
			return *result, nil
		}
	default:
		return invalidExclude, fmt.Errorf("invalid type %T", input)
	}
	return invalidExclude, nil
}

// excludesNameMap is a map of enum values to their Exclude representation
// It is used to convert string representations of enum values into their Exclude representation.
var excludesNameMap = map[string]Exclude{
	"unknownExclude": Excludes.UNKNOWNEXCLUDE,
	"current":        Excludes.CURRENT,
	"minutely":       Excludes.MINUTELY,
	"hourly":         Excludes.HOURLY,
	"daily":          Excludes.DAILY,
	"alerts":         Excludes.ALERTS,
}

// stringToExclude converts a string representation of an enum value into its Exclude representation
// It returns a pointer to the Exclude representation of the enum value if the string is valid
// Otherwise, it returns nil
func stringToExclude(s string) *Exclude {
	if t, ok := excludesNameMap[s]; ok {
		return &t
	}
	return nil
}

// numberToExclude converts a numeric value to a Exclude
// It returns a pointer to the Exclude representation of the enum value if the numeric value is valid
// Otherwise, it returns nil
func numberToExclude[T constraints.Integer | constraints.Float](num T) *Exclude {
	f := float64(num)
	if math.Floor(f) != f {
		return nil
	}
	i := int(f)
	if i <= 0 || i > len(Excludes.allSlice()) {
		return nil
	}
	result := Excludes.allSlice()[i-1]
	if !result.IsValid() {
		return nil
	}
	return &result
}

// ExhaustiveExcludes iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveExcludes(f func(Exclude)) {
	for _, p := range Excludes.allSlice() {
		f(p)
	}
}

// validExcludes is a map of enum values to their validity
var validExcludes = map[Exclude]bool{
	Excludes.UNKNOWNEXCLUDE: false,
	Excludes.CURRENT:        true,
	Excludes.MINUTELY:       true,
	Excludes.HOURLY:         true,
	Excludes.DAILY:          true,
	Excludes.ALERTS:         true,
}

// IsValid checks whether the Excludes value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (e Exclude) IsValid() bool {
	return validExcludes[e]
}

// MarshalJSON implements the json.Marshaler interface for Exclude.
// It returns the JSON representation of the enum value as a byte slice.
func (e Exclude) MarshalJSON() ([]byte, error) {
	return []byte("\"" + e.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for Exclude.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (e *Exclude) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newe, err := ParseExclude(b)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Exclude.
// It returns the string representation of the enum value as a byte slice
func (e Exclude) MarshalText() ([]byte, error) {
	return []byte("\"" + e.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Exclude.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (e *Exclude) UnmarshalText(b []byte) error {
	newe, err := ParseExclude(b)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// Scan implements the database/sql.Scanner interface for Exclude.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (e *Exclude) Scan(value any) error {
	newe, err := ParseExclude(value)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// Value implements the database/sql/driver.Valuer interface for Exclude.
// It returns the string representation of the enum value.
func (e Exclude) Value() (driver.Value, error) {
	return e.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Exclude.
// It returns the binary representation of the enum value as a byte slice.
func (e Exclude) MarshalBinary() ([]byte, error) {
	return []byte("\"" + e.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Exclude.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (e *Exclude) UnmarshalBinary(b []byte) error {
	newe, err := ParseExclude(b)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for Exclude.
// It returns the string representation of the enum value.
func (e Exclude) MarshalYAML() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Planet.
// It parses the byte slice representation of the enum value and returns an error
// if the YAML byte slice does not contain a valid enum value.
func (e *Exclude) UnmarshalYAML(b []byte) error {
	newe, err := ParseExclude(b)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// excludeNames is a constant string slice containing all enum values cononical absolute names
const excludeNames = "unknownExcludecurrentminutelyhourlydailyalerts"

// excludeNamesMap is a map of enum values to their canonical absolute
// name positions within the excludeNames string slice
var excludeNamesMap = map[Exclude]string{
	Excludes.UNKNOWNEXCLUDE: excludeNames[0:14],
	Excludes.CURRENT:        excludeNames[14:21],
	Excludes.MINUTELY:       excludeNames[21:29],
	Excludes.HOURLY:         excludeNames[29:35],
	Excludes.DAILY:          excludeNames[35:40],
	Excludes.ALERTS:         excludeNames[40:46],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (e Exclude) String() string {
	if str, ok := excludeNamesMap[e]; ok {
		return str
	}
	return fmt.Sprintf("exclude(%d)", e.exclude)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [6]struct{}
	_ = x[unknownExclude]
	_ = x[current-1]
	_ = x[minutely-2]
	_ = x[hourly-3]
	_ = x[daily-4]
	_ = x[alerts-5]
}
