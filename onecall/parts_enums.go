// DO NOT EDIT.
// code generated by goenums v0.4.3 at Aug 21 09:13:07.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums part.go

package onecall

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"

	"golang.org/x/exp/constraints"
)

// Part is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type Part struct {
	part
}

// partsContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the Part type.
type partsContainer struct {
	UNKNOWNPART Part
	CURRENT     Part
	MINUTELY    Part
	HOURLY      Part
	DAILY       Part
	ALERTS      Part
}

// Parts is a main entry point using the Part type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var Parts = partsContainer{
	UNKNOWNPART: Part{
		part: unknownPart,
	},
	CURRENT: Part{
		part: current,
	},
	MINUTELY: Part{
		part: minutely,
	},
	HOURLY: Part{
		part: hourly,
	},
	DAILY: Part{
		part: daily,
	},
	ALERTS: Part{
		part: alerts,
	},
}

// invalidPart is an invalid sentinel value for Part
var invalidPart = Part{
	part: -1,
}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (p partsContainer) allSlice() []Part {
	return []Part{
		Parts.CURRENT,
		Parts.MINUTELY,
		Parts.HOURLY,
		Parts.DAILY,
		Parts.ALERTS,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (p partsContainer) All() iter.Seq[Part] {
	return func(yield func(Part) bool) {
		for _, v := range p.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParsePart parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParsePart(input any) (Part, error) {
	switch v := input.(type) {
	case Part:
		return v, nil
	case string:
		if result := stringToPart(v); result != nil {
			return *result, nil
		}
	case fmt.Stringer:
		if result := stringToPart(v.String()); result != nil {
			return *result, nil
		}
	case []byte:
		if result := stringToPart(string(v)); result != nil {
			return *result, nil
		}
	case int:
		if result := numberToPart(v); result != nil {
			return *result, nil
		}
	case int8:
		if result := numberToPart(v); result != nil {
			return *result, nil
		}
	case int16:
		if result := numberToPart(v); result != nil {
			return *result, nil
		}
	case int32:
		if result := numberToPart(v); result != nil {
			return *result, nil
		}
	case int64:
		if result := numberToPart(v); result != nil {
			return *result, nil
		}
	case uint:
		if result := numberToPart(v); result != nil {
			return *result, nil
		}
	case uint8:
		if result := numberToPart(v); result != nil {
			return *result, nil
		}
	case uint16:
		if result := numberToPart(v); result != nil {
			return *result, nil
		}
	case uint32:
		if result := numberToPart(v); result != nil {
			return *result, nil
		}
	case uint64:
		if result := numberToPart(v); result != nil {
			return *result, nil
		}
	case float32:
		if result := numberToPart(v); result != nil {
			return *result, nil
		}
	case float64:
		if result := numberToPart(v); result != nil {
			return *result, nil
		}
	default:
		return invalidPart, fmt.Errorf("invalid type %T", input)
	}
	return invalidPart, nil
}

// partsNameMap is a map of enum values to their Part representation
// It is used to convert string representations of enum values into their Part representation.
var partsNameMap = map[string]Part{
	"unknownPart": Parts.UNKNOWNPART,
	"current":     Parts.CURRENT,
	"minutely":    Parts.MINUTELY,
	"hourly":      Parts.HOURLY,
	"daily":       Parts.DAILY,
	"alerts":      Parts.ALERTS,
}

// stringToPart converts a string representation of an enum value into its Part representation
// It returns a pointer to the Part representation of the enum value if the string is valid
// Otherwise, it returns nil
func stringToPart(s string) *Part {
	if t, ok := partsNameMap[s]; ok {
		return &t
	}
	return nil
}

// numberToPart converts a numeric value to a Part
// It returns a pointer to the Part representation of the enum value if the numeric value is valid
// Otherwise, it returns nil
func numberToPart[T constraints.Integer | constraints.Float](num T) *Part {
	f := float64(num)
	if math.Floor(f) != f {
		return nil
	}
	i := int(f)
	if i <= 0 || i > len(Parts.allSlice()) {
		return nil
	}
	result := Parts.allSlice()[i-1]
	if !result.IsValid() {
		return nil
	}
	return &result
}

// ExhaustiveParts iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveParts(f func(Part)) {
	for _, p := range Parts.allSlice() {
		f(p)
	}
}

// validParts is a map of enum values to their validity
var validParts = map[Part]bool{
	Parts.UNKNOWNPART: false,
	Parts.CURRENT:     true,
	Parts.MINUTELY:    true,
	Parts.HOURLY:      true,
	Parts.DAILY:       true,
	Parts.ALERTS:      true,
}

// IsValid checks whether the Parts value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (p Part) IsValid() bool {
	return validParts[p]
}

// MarshalJSON implements the json.Marshaler interface for Part.
// It returns the JSON representation of the enum value as a byte slice.
func (p Part) MarshalJSON() ([]byte, error) {
	return []byte("\"" + p.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for Part.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (p *Part) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newp, err := ParsePart(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Part.
// It returns the string representation of the enum value as a byte slice
func (p Part) MarshalText() ([]byte, error) {
	return []byte("\"" + p.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Part.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (p *Part) UnmarshalText(b []byte) error {
	newp, err := ParsePart(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Scan implements the database/sql.Scanner interface for Part.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (p *Part) Scan(value any) error {
	newp, err := ParsePart(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// Value implements the database/sql/driver.Valuer interface for Part.
// It returns the string representation of the enum value.
func (p Part) Value() (driver.Value, error) {
	return p.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Part.
// It returns the binary representation of the enum value as a byte slice.
func (p Part) MarshalBinary() ([]byte, error) {
	return []byte("\"" + p.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Part.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (p *Part) UnmarshalBinary(b []byte) error {
	newp, err := ParsePart(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for Part.
// It returns the string representation of the enum value.
func (p Part) MarshalYAML() ([]byte, error) {
	return []byte(p.String()), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Planet.
// It parses the byte slice representation of the enum value and returns an error
// if the YAML byte slice does not contain a valid enum value.
func (p *Part) UnmarshalYAML(b []byte) error {
	newp, err := ParsePart(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

// partNames is a constant string slice containing all enum values cononical absolute names
const partNames = "unknownPartcurrentminutelyhourlydailyalerts"

// partNamesMap is a map of enum values to their canonical absolute
// name positions within the partNames string slice
var partNamesMap = map[Part]string{
	Parts.UNKNOWNPART: partNames[0:11],
	Parts.CURRENT:     partNames[11:18],
	Parts.MINUTELY:    partNames[18:26],
	Parts.HOURLY:      partNames[26:32],
	Parts.DAILY:       partNames[32:37],
	Parts.ALERTS:      partNames[37:43],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (p Part) String() string {
	if str, ok := partNamesMap[p]; ok {
		return str
	}
	return fmt.Sprintf("part(%d)", p.part)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [6]struct{}
	_ = x[unknownPart]
	_ = x[current-1]
	_ = x[minutely-2]
	_ = x[hourly-3]
	_ = x[daily-4]
	_ = x[alerts-5]
}
