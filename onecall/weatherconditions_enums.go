// DO NOT EDIT.
// code generated by goenums v0.4.3 at Aug 10 13:12:31.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums weather_condition.go

package onecall

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"

	"golang.org/x/exp/constraints"
)

// WeatherCondition is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type WeatherCondition struct {
	weatherCondition
	Code        int64
	Group       string
	Description string
}

// weatherConditionsContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the WeatherCondition type.
type weatherConditionsContainer struct {
	THUNDERSTORMWITHLIGHTRAIN    WeatherCondition
	THUNDERSTORMWITHRAIN         WeatherCondition
	THUNDERSTORMWITHHEAVYRAIN    WeatherCondition
	LIGHTTHUNDERSTORM            WeatherCondition
	THUNDERSTORM                 WeatherCondition
	HEAVYTHUNDERSTORM            WeatherCondition
	RAGGEDTHUNDERSTORM           WeatherCondition
	THUNDERSTORMWITHLIGHTDRIZZLE WeatherCondition
	THUNDERSTORMWITHDRIZZLE      WeatherCondition
	THUNDERSTORMWITHHEAVYDRIZZLE WeatherCondition
	LIGHTINTENSITYDRIZZLE        WeatherCondition
	DRIZZLE                      WeatherCondition
	HEAVYINTENSITYDRIZZLE        WeatherCondition
	LIGHTINTENSITYDRIZZLERAIN    WeatherCondition
	DRIZZLERAIN                  WeatherCondition
	SHOWERRAINANDDRIZZLE         WeatherCondition
	HEAVYSHOWERRAINANDDRIZZLE    WeatherCondition
	SHOWERDRIZZLE                WeatherCondition
	LIGHTRAIN                    WeatherCondition
	MODERATERAIN                 WeatherCondition
	HEAVYINTENSITYRAIN           WeatherCondition
	VERYHEAVYRAIN                WeatherCondition
	EXTREMERAIN                  WeatherCondition
	FREEZINGRAIN                 WeatherCondition
	LIGHTINTENSITYSHOWERRAIN     WeatherCondition
	SHOWERRAIN                   WeatherCondition
	HEAVYINTENSITYSHOWERRAIN     WeatherCondition
	RAGGEDSHOWERRAIN             WeatherCondition
	LIGHTSNOW                    WeatherCondition
	SNOW                         WeatherCondition
	HEAVYSNOW                    WeatherCondition
	SLEET                        WeatherCondition
	LIGHTSHOWERSLEET             WeatherCondition
	SHOWERSLEET                  WeatherCondition
	LIGHTRAINANDSNOW             WeatherCondition
	RAINANDSNOW                  WeatherCondition
	LIGHTSHOWERSNOW              WeatherCondition
	SHOWERSNOW                   WeatherCondition
	HEAVYSHOWERSNOW              WeatherCondition
	MIST                         WeatherCondition
	SMOKE                        WeatherCondition
	HAZE                         WeatherCondition
	SANDDUSTWHIRLS               WeatherCondition
	FOG                          WeatherCondition
	SAND                         WeatherCondition
	DUST                         WeatherCondition
	VOLCANICASH                  WeatherCondition
	SQUALLS                      WeatherCondition
	TORNADO                      WeatherCondition
	CLEAR                        WeatherCondition
	FEWCLOUDS                    WeatherCondition
	SCATTEREDCLOUDS              WeatherCondition
	BROKENCLOUDS                 WeatherCondition
	OVERCASTCLOUDS               WeatherCondition
}

// WeatherConditions is a main entry point using the WeatherCondition type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var WeatherConditions = weatherConditionsContainer{
	THUNDERSTORMWITHLIGHTRAIN: WeatherCondition{
		weatherCondition: thunderstormWithLightRain,
		Code:             200,
		Group:            "Thunderstorm",
		Description:      "thunderstorm with light rain",
	},
	THUNDERSTORMWITHRAIN: WeatherCondition{
		weatherCondition: thunderstormWithRain,
		Code:             201,
		Group:            "Thunderstorm",
		Description:      "thunderstorm with rain",
	},
	THUNDERSTORMWITHHEAVYRAIN: WeatherCondition{
		weatherCondition: thunderstormWithHeavyRain,
		Code:             202,
		Group:            "Thunderstorm",
		Description:      "thunderstorm with heavy rain",
	},
	LIGHTTHUNDERSTORM: WeatherCondition{
		weatherCondition: lightThunderstorm,
		Code:             210,
		Group:            "Thunderstorm",
		Description:      "light thunderstorm",
	},
	THUNDERSTORM: WeatherCondition{
		weatherCondition: thunderstorm,
		Code:             211,
		Group:            "Thunderstorm",
		Description:      "thunderstorm",
	},
	HEAVYTHUNDERSTORM: WeatherCondition{
		weatherCondition: heavyThunderstorm,
		Code:             212,
		Group:            "Thunderstorm",
		Description:      "heavy thunderstorm",
	},
	RAGGEDTHUNDERSTORM: WeatherCondition{
		weatherCondition: raggedThunderstorm,
		Code:             221,
		Group:            "Thunderstorm",
		Description:      "ragged thunderstorm",
	},
	THUNDERSTORMWITHLIGHTDRIZZLE: WeatherCondition{
		weatherCondition: thunderstormWithLightDrizzle,
		Code:             230,
		Group:            "Thunderstorm",
		Description:      "thunderstorm with light drizzle",
	},
	THUNDERSTORMWITHDRIZZLE: WeatherCondition{
		weatherCondition: thunderstormWithDrizzle,
		Code:             231,
		Group:            "Thunderstorm",
		Description:      "thunderstorm with drizzle",
	},
	THUNDERSTORMWITHHEAVYDRIZZLE: WeatherCondition{
		weatherCondition: thunderstormWithHeavyDrizzle,
		Code:             232,
		Group:            "Thunderstorm",
		Description:      "thunderstorm with drizzle",
	},
	LIGHTINTENSITYDRIZZLE: WeatherCondition{
		weatherCondition: lightIntensityDrizzle,
		Code:             300,
		Group:            "Drizzle",
		Description:      "light intensity drizzle",
	},
	DRIZZLE: WeatherCondition{
		weatherCondition: drizzle,
		Code:             301,
		Group:            "Drizzle",
		Description:      "drizzle",
	},
	HEAVYINTENSITYDRIZZLE: WeatherCondition{
		weatherCondition: heavyIntensityDrizzle,
		Code:             310,
		Group:            "Drizzle",
		Description:      "heavy intensity drizzle",
	},
	LIGHTINTENSITYDRIZZLERAIN: WeatherCondition{
		weatherCondition: lightIntensityDrizzleRain,
		Code:             311,
		Group:            "Drizzle",
		Description:      "light intensity drizzle rain",
	},
	DRIZZLERAIN: WeatherCondition{
		weatherCondition: drizzleRain,
		Code:             312,
		Group:            "Drizzle",
		Description:      "drizzle rain",
	},
	SHOWERRAINANDDRIZZLE: WeatherCondition{
		weatherCondition: showerRainAndDrizzle,
		Code:             313,
		Group:            "Drizzle",
		Description:      "shower rain and drizzle",
	},
	HEAVYSHOWERRAINANDDRIZZLE: WeatherCondition{
		weatherCondition: heavyShowerRainAndDrizzle,
		Code:             314,
		Group:            "Drizzle",
		Description:      "heavy shower rain and drizzle",
	},
	SHOWERDRIZZLE: WeatherCondition{
		weatherCondition: showerDrizzle,
		Code:             321,
		Group:            "Drizzle",
		Description:      "shower drizzle",
	},
	LIGHTRAIN: WeatherCondition{
		weatherCondition: lightRain,
		Code:             500,
		Group:            "Rain",
		Description:      "light rain",
	},
	MODERATERAIN: WeatherCondition{
		weatherCondition: moderateRain,
		Code:             501,
		Group:            "Rain",
		Description:      "moderate rain",
	},
	HEAVYINTENSITYRAIN: WeatherCondition{
		weatherCondition: heavyIntensityRain,
		Code:             502,
		Group:            "Rain",
		Description:      "heavy intensity rain",
	},
	VERYHEAVYRAIN: WeatherCondition{
		weatherCondition: veryHeavyRain,
		Code:             503,
		Group:            "Rain",
		Description:      "very heavy rain",
	},
	EXTREMERAIN: WeatherCondition{
		weatherCondition: extremeRain,
		Code:             504,
		Group:            "Rain",
		Description:      "extreme rain",
	},
	FREEZINGRAIN: WeatherCondition{
		weatherCondition: freezingRain,
		Code:             511,
		Group:            "Rain",
		Description:      "freezing rain",
	},
	LIGHTINTENSITYSHOWERRAIN: WeatherCondition{
		weatherCondition: lightIntensityShowerRain,
		Code:             520,
		Group:            "Rain",
		Description:      "light intensity shower rain",
	},
	SHOWERRAIN: WeatherCondition{
		weatherCondition: showerRain,
		Code:             521,
		Group:            "Rain",
		Description:      "shower rain",
	},
	HEAVYINTENSITYSHOWERRAIN: WeatherCondition{
		weatherCondition: heavyIntensityShowerRain,
		Code:             522,
		Group:            "Rain",
		Description:      "heavy intensity shower rain",
	},
	RAGGEDSHOWERRAIN: WeatherCondition{
		weatherCondition: raggedShowerRain,
		Code:             531,
		Group:            "Rain",
		Description:      "ragged shower rain",
	},
	LIGHTSNOW: WeatherCondition{
		weatherCondition: lightSnow,
		Code:             600,
		Group:            "Snow",
		Description:      "light snow",
	},
	SNOW: WeatherCondition{
		weatherCondition: snow,
		Code:             601,
		Group:            "Snow",
		Description:      "snow",
	},
	HEAVYSNOW: WeatherCondition{
		weatherCondition: heavySnow,
		Code:             602,
		Group:            "Snow",
		Description:      "heavy snow",
	},
	SLEET: WeatherCondition{
		weatherCondition: sleet,
		Code:             611,
		Group:            "Snow",
		Description:      "sleet",
	},
	LIGHTSHOWERSLEET: WeatherCondition{
		weatherCondition: lightShowerSleet,
		Code:             612,
		Group:            "Snow",
		Description:      "light shower sleet",
	},
	SHOWERSLEET: WeatherCondition{
		weatherCondition: showerSleet,
		Code:             613,
		Group:            "Snow",
		Description:      "shower sleet",
	},
	LIGHTRAINANDSNOW: WeatherCondition{
		weatherCondition: lightRainAndSnow,
		Code:             615,
		Group:            "Snow",
		Description:      "light rain and snow",
	},
	RAINANDSNOW: WeatherCondition{
		weatherCondition: rainAndSnow,
		Code:             616,
		Group:            "Snow",
		Description:      "rain and snow",
	},
	LIGHTSHOWERSNOW: WeatherCondition{
		weatherCondition: lightShowerSnow,
		Code:             620,
		Group:            "Snow",
		Description:      "light shower snow",
	},
	SHOWERSNOW: WeatherCondition{
		weatherCondition: showerSnow,
		Code:             621,
		Group:            "Snow",
		Description:      "shower snow",
	},
	HEAVYSHOWERSNOW: WeatherCondition{
		weatherCondition: heavyShowerSnow,
		Code:             622,
		Group:            "Snow",
		Description:      "heavy shower snow",
	},
	MIST: WeatherCondition{
		weatherCondition: mist,
		Code:             701,
		Group:            "Mist",
		Description:      "mist",
	},
	SMOKE: WeatherCondition{
		weatherCondition: smoke,
		Code:             711,
		Group:            "Smoke",
		Description:      "smoke",
	},
	HAZE: WeatherCondition{
		weatherCondition: haze,
		Code:             721,
		Group:            "Haze",
		Description:      "haze",
	},
	SANDDUSTWHIRLS: WeatherCondition{
		weatherCondition: sandDustWhirls,
		Code:             731,
		Group:            "Dust",
		Description:      "sand/dust whirls",
	},
	FOG: WeatherCondition{
		weatherCondition: fog,
		Code:             741,
		Group:            "Fog",
		Description:      "fog",
	},
	SAND: WeatherCondition{
		weatherCondition: sand,
		Code:             751,
		Group:            "Sand",
		Description:      "sand",
	},
	DUST: WeatherCondition{
		weatherCondition: dust,
		Code:             761,
		Group:            "Dust",
		Description:      "dust",
	},
	VOLCANICASH: WeatherCondition{
		weatherCondition: volcanicAsh,
		Code:             762,
		Group:            "Ash",
		Description:      "volcanic ash",
	},
	SQUALLS: WeatherCondition{
		weatherCondition: squalls,
		Code:             771,
		Group:            "Squall",
		Description:      "squalls",
	},
	TORNADO: WeatherCondition{
		weatherCondition: tornado,
		Code:             781,
		Group:            "Tornado",
		Description:      "tornado",
	},
	CLEAR: WeatherCondition{
		weatherCondition: clear,
		Code:             800,
		Group:            "Clear",
		Description:      "clear sky",
	},
	FEWCLOUDS: WeatherCondition{
		weatherCondition: fewClouds,
		Code:             801,
		Group:            "Clouds",
		Description:      "few clouds",
	},
	SCATTEREDCLOUDS: WeatherCondition{
		weatherCondition: scatteredClouds,
		Code:             802,
		Group:            "Clouds",
		Description:      "scattered clouds",
	},
	BROKENCLOUDS: WeatherCondition{
		weatherCondition: brokenClouds,
		Code:             803,
		Group:            "Clouds",
		Description:      "broken clouds",
	},
	OVERCASTCLOUDS: WeatherCondition{
		weatherCondition: overcastClouds,
		Code:             804,
		Group:            "Clouds",
		Description:      "overcast clouds",
	},
}

// invalidWeatherCondition is an invalid sentinel value for WeatherCondition
var invalidWeatherCondition = WeatherCondition{
	weatherCondition: -1,
}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (w weatherConditionsContainer) allSlice() []WeatherCondition {
	return []WeatherCondition{
		WeatherConditions.THUNDERSTORMWITHLIGHTRAIN,
		WeatherConditions.THUNDERSTORMWITHRAIN,
		WeatherConditions.THUNDERSTORMWITHHEAVYRAIN,
		WeatherConditions.LIGHTTHUNDERSTORM,
		WeatherConditions.THUNDERSTORM,
		WeatherConditions.HEAVYTHUNDERSTORM,
		WeatherConditions.RAGGEDTHUNDERSTORM,
		WeatherConditions.THUNDERSTORMWITHLIGHTDRIZZLE,
		WeatherConditions.THUNDERSTORMWITHDRIZZLE,
		WeatherConditions.THUNDERSTORMWITHHEAVYDRIZZLE,
		WeatherConditions.LIGHTINTENSITYDRIZZLE,
		WeatherConditions.DRIZZLE,
		WeatherConditions.HEAVYINTENSITYDRIZZLE,
		WeatherConditions.LIGHTINTENSITYDRIZZLERAIN,
		WeatherConditions.DRIZZLERAIN,
		WeatherConditions.SHOWERRAINANDDRIZZLE,
		WeatherConditions.HEAVYSHOWERRAINANDDRIZZLE,
		WeatherConditions.SHOWERDRIZZLE,
		WeatherConditions.LIGHTRAIN,
		WeatherConditions.MODERATERAIN,
		WeatherConditions.HEAVYINTENSITYRAIN,
		WeatherConditions.VERYHEAVYRAIN,
		WeatherConditions.EXTREMERAIN,
		WeatherConditions.FREEZINGRAIN,
		WeatherConditions.LIGHTINTENSITYSHOWERRAIN,
		WeatherConditions.SHOWERRAIN,
		WeatherConditions.HEAVYINTENSITYSHOWERRAIN,
		WeatherConditions.RAGGEDSHOWERRAIN,
		WeatherConditions.LIGHTSNOW,
		WeatherConditions.SNOW,
		WeatherConditions.HEAVYSNOW,
		WeatherConditions.SLEET,
		WeatherConditions.LIGHTSHOWERSLEET,
		WeatherConditions.SHOWERSLEET,
		WeatherConditions.LIGHTRAINANDSNOW,
		WeatherConditions.RAINANDSNOW,
		WeatherConditions.LIGHTSHOWERSNOW,
		WeatherConditions.SHOWERSNOW,
		WeatherConditions.HEAVYSHOWERSNOW,
		WeatherConditions.MIST,
		WeatherConditions.SMOKE,
		WeatherConditions.HAZE,
		WeatherConditions.SANDDUSTWHIRLS,
		WeatherConditions.FOG,
		WeatherConditions.SAND,
		WeatherConditions.DUST,
		WeatherConditions.VOLCANICASH,
		WeatherConditions.SQUALLS,
		WeatherConditions.TORNADO,
		WeatherConditions.CLEAR,
		WeatherConditions.FEWCLOUDS,
		WeatherConditions.SCATTEREDCLOUDS,
		WeatherConditions.BROKENCLOUDS,
		WeatherConditions.OVERCASTCLOUDS,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (w weatherConditionsContainer) All() iter.Seq[WeatherCondition] {
	return func(yield func(WeatherCondition) bool) {
		for _, v := range w.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseWeatherCondition parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseWeatherCondition(input any) (WeatherCondition, error) {
	switch v := input.(type) {
	case WeatherCondition:
		return v, nil
	case string:
		if result := stringToWeatherCondition(v); result != nil {
			return *result, nil
		}
	case fmt.Stringer:
		if result := stringToWeatherCondition(v.String()); result != nil {
			return *result, nil
		}
	case []byte:
		if result := stringToWeatherCondition(string(v)); result != nil {
			return *result, nil
		}
	case int:
		if result := numberToWeatherCondition(v); result != nil {
			return *result, nil
		}
	case int8:
		if result := numberToWeatherCondition(v); result != nil {
			return *result, nil
		}
	case int16:
		if result := numberToWeatherCondition(v); result != nil {
			return *result, nil
		}
	case int32:
		if result := numberToWeatherCondition(v); result != nil {
			return *result, nil
		}
	case int64:
		if result := numberToWeatherCondition(v); result != nil {
			return *result, nil
		}
	case uint:
		if result := numberToWeatherCondition(v); result != nil {
			return *result, nil
		}
	case uint8:
		if result := numberToWeatherCondition(v); result != nil {
			return *result, nil
		}
	case uint16:
		if result := numberToWeatherCondition(v); result != nil {
			return *result, nil
		}
	case uint32:
		if result := numberToWeatherCondition(v); result != nil {
			return *result, nil
		}
	case uint64:
		if result := numberToWeatherCondition(v); result != nil {
			return *result, nil
		}
	case float32:
		if result := numberToWeatherCondition(v); result != nil {
			return *result, nil
		}
	case float64:
		if result := numberToWeatherCondition(v); result != nil {
			return *result, nil
		}
	default:
		return invalidWeatherCondition, fmt.Errorf("invalid type %T", input)
	}
	return invalidWeatherCondition, nil
}

// weatherConditionsNameMap is a map of enum values to their WeatherCondition representation
// It is used to convert string representations of enum values into their WeatherCondition representation.
var weatherConditionsNameMap = map[string]WeatherCondition{
	"thunderstormWithLightRain":    WeatherConditions.THUNDERSTORMWITHLIGHTRAIN,
	"thunderstormWithRain":         WeatherConditions.THUNDERSTORMWITHRAIN,
	"thunderstormWithHeavyRain":    WeatherConditions.THUNDERSTORMWITHHEAVYRAIN,
	"lightThunderstorm":            WeatherConditions.LIGHTTHUNDERSTORM,
	"thunderstorm":                 WeatherConditions.THUNDERSTORM,
	"heavyThunderstorm":            WeatherConditions.HEAVYTHUNDERSTORM,
	"raggedThunderstorm":           WeatherConditions.RAGGEDTHUNDERSTORM,
	"thunderstormWithLightDrizzle": WeatherConditions.THUNDERSTORMWITHLIGHTDRIZZLE,
	"thunderstormWithDrizzle":      WeatherConditions.THUNDERSTORMWITHDRIZZLE,
	"thunderstormWithHeavyDrizzle": WeatherConditions.THUNDERSTORMWITHHEAVYDRIZZLE,
	"lightIntensityDrizzle":        WeatherConditions.LIGHTINTENSITYDRIZZLE,
	"drizzle":                      WeatherConditions.DRIZZLE,
	"heavyIntensityDrizzle":        WeatherConditions.HEAVYINTENSITYDRIZZLE,
	"lightIntensityDrizzleRain":    WeatherConditions.LIGHTINTENSITYDRIZZLERAIN,
	"drizzleRain":                  WeatherConditions.DRIZZLERAIN,
	"showerRainAndDrizzle":         WeatherConditions.SHOWERRAINANDDRIZZLE,
	"heavyShowerRainAndDrizzle":    WeatherConditions.HEAVYSHOWERRAINANDDRIZZLE,
	"showerDrizzle":                WeatherConditions.SHOWERDRIZZLE,
	"lightRain":                    WeatherConditions.LIGHTRAIN,
	"moderateRain":                 WeatherConditions.MODERATERAIN,
	"heavyIntensityRain":           WeatherConditions.HEAVYINTENSITYRAIN,
	"veryHeavyRain":                WeatherConditions.VERYHEAVYRAIN,
	"extremeRain":                  WeatherConditions.EXTREMERAIN,
	"freezingRain":                 WeatherConditions.FREEZINGRAIN,
	"lightIntensityShowerRain":     WeatherConditions.LIGHTINTENSITYSHOWERRAIN,
	"showerRain":                   WeatherConditions.SHOWERRAIN,
	"heavyIntensityShowerRain":     WeatherConditions.HEAVYINTENSITYSHOWERRAIN,
	"raggedShowerRain":             WeatherConditions.RAGGEDSHOWERRAIN,
	"lightSnow":                    WeatherConditions.LIGHTSNOW,
	"snow":                         WeatherConditions.SNOW,
	"heavySnow":                    WeatherConditions.HEAVYSNOW,
	"sleet":                        WeatherConditions.SLEET,
	"lightShowerSleet":             WeatherConditions.LIGHTSHOWERSLEET,
	"showerSleet":                  WeatherConditions.SHOWERSLEET,
	"lightRainAndSnow":             WeatherConditions.LIGHTRAINANDSNOW,
	"rainAndSnow":                  WeatherConditions.RAINANDSNOW,
	"lightShowerSnow":              WeatherConditions.LIGHTSHOWERSNOW,
	"showerSnow":                   WeatherConditions.SHOWERSNOW,
	"heavyShowerSnow":              WeatherConditions.HEAVYSHOWERSNOW,
	"mist":                         WeatherConditions.MIST,
	"smoke":                        WeatherConditions.SMOKE,
	"haze":                         WeatherConditions.HAZE,
	"sandDustWhirls":               WeatherConditions.SANDDUSTWHIRLS,
	"fog":                          WeatherConditions.FOG,
	"sand":                         WeatherConditions.SAND,
	"dust":                         WeatherConditions.DUST,
	"volcanicAsh":                  WeatherConditions.VOLCANICASH,
	"squalls":                      WeatherConditions.SQUALLS,
	"tornado":                      WeatherConditions.TORNADO,
	"clear":                        WeatherConditions.CLEAR,
	"fewClouds":                    WeatherConditions.FEWCLOUDS,
	"scatteredClouds":              WeatherConditions.SCATTEREDCLOUDS,
	"brokenClouds":                 WeatherConditions.BROKENCLOUDS,
	"overcastClouds":               WeatherConditions.OVERCASTCLOUDS,
}

// stringToWeatherCondition converts a string representation of an enum value into its WeatherCondition representation
// It returns a pointer to the WeatherCondition representation of the enum value if the string is valid
// Otherwise, it returns nil
func stringToWeatherCondition(s string) *WeatherCondition {
	if t, ok := weatherConditionsNameMap[s]; ok {
		return &t
	}
	return nil
}

// numberToWeatherCondition converts a numeric value to a WeatherCondition
// It returns a pointer to the WeatherCondition representation of the enum value if the numeric value is valid
// Otherwise, it returns nil
func numberToWeatherCondition[T constraints.Integer | constraints.Float](num T) *WeatherCondition {
	f := float64(num)
	if math.Floor(f) != f {
		return nil
	}
	i := int(f)
	if i <= 0 || i > len(WeatherConditions.allSlice()) {
		return nil
	}
	result := WeatherConditions.allSlice()[i-1]
	if !result.IsValid() {
		return nil
	}
	return &result
}

// ExhaustiveWeatherConditions iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveWeatherConditions(f func(WeatherCondition)) {
	for _, p := range WeatherConditions.allSlice() {
		f(p)
	}
}

// validWeatherConditions is a map of enum values to their validity
var validWeatherConditions = map[WeatherCondition]bool{
	WeatherConditions.THUNDERSTORMWITHLIGHTRAIN:    true,
	WeatherConditions.THUNDERSTORMWITHRAIN:         true,
	WeatherConditions.THUNDERSTORMWITHHEAVYRAIN:    true,
	WeatherConditions.LIGHTTHUNDERSTORM:            true,
	WeatherConditions.THUNDERSTORM:                 true,
	WeatherConditions.HEAVYTHUNDERSTORM:            true,
	WeatherConditions.RAGGEDTHUNDERSTORM:           true,
	WeatherConditions.THUNDERSTORMWITHLIGHTDRIZZLE: true,
	WeatherConditions.THUNDERSTORMWITHDRIZZLE:      true,
	WeatherConditions.THUNDERSTORMWITHHEAVYDRIZZLE: true,
	WeatherConditions.LIGHTINTENSITYDRIZZLE:        true,
	WeatherConditions.DRIZZLE:                      true,
	WeatherConditions.HEAVYINTENSITYDRIZZLE:        true,
	WeatherConditions.LIGHTINTENSITYDRIZZLERAIN:    true,
	WeatherConditions.DRIZZLERAIN:                  true,
	WeatherConditions.SHOWERRAINANDDRIZZLE:         true,
	WeatherConditions.HEAVYSHOWERRAINANDDRIZZLE:    true,
	WeatherConditions.SHOWERDRIZZLE:                true,
	WeatherConditions.LIGHTRAIN:                    true,
	WeatherConditions.MODERATERAIN:                 true,
	WeatherConditions.HEAVYINTENSITYRAIN:           true,
	WeatherConditions.VERYHEAVYRAIN:                true,
	WeatherConditions.EXTREMERAIN:                  true,
	WeatherConditions.FREEZINGRAIN:                 true,
	WeatherConditions.LIGHTINTENSITYSHOWERRAIN:     true,
	WeatherConditions.SHOWERRAIN:                   true,
	WeatherConditions.HEAVYINTENSITYSHOWERRAIN:     true,
	WeatherConditions.RAGGEDSHOWERRAIN:             true,
	WeatherConditions.LIGHTSNOW:                    true,
	WeatherConditions.SNOW:                         true,
	WeatherConditions.HEAVYSNOW:                    true,
	WeatherConditions.SLEET:                        true,
	WeatherConditions.LIGHTSHOWERSLEET:             true,
	WeatherConditions.SHOWERSLEET:                  true,
	WeatherConditions.LIGHTRAINANDSNOW:             true,
	WeatherConditions.RAINANDSNOW:                  true,
	WeatherConditions.LIGHTSHOWERSNOW:              true,
	WeatherConditions.SHOWERSNOW:                   true,
	WeatherConditions.HEAVYSHOWERSNOW:              true,
	WeatherConditions.MIST:                         true,
	WeatherConditions.SMOKE:                        true,
	WeatherConditions.HAZE:                         true,
	WeatherConditions.SANDDUSTWHIRLS:               true,
	WeatherConditions.FOG:                          true,
	WeatherConditions.SAND:                         true,
	WeatherConditions.DUST:                         true,
	WeatherConditions.VOLCANICASH:                  true,
	WeatherConditions.SQUALLS:                      true,
	WeatherConditions.TORNADO:                      true,
	WeatherConditions.CLEAR:                        true,
	WeatherConditions.FEWCLOUDS:                    true,
	WeatherConditions.SCATTEREDCLOUDS:              true,
	WeatherConditions.BROKENCLOUDS:                 true,
	WeatherConditions.OVERCASTCLOUDS:               true,
}

// IsValid checks whether the WeatherConditions value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (w WeatherCondition) IsValid() bool {
	return validWeatherConditions[w]
}

// MarshalJSON implements the json.Marshaler interface for WeatherCondition.
// It returns the JSON representation of the enum value as a byte slice.
func (w WeatherCondition) MarshalJSON() ([]byte, error) {
	return []byte("\"" + w.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for WeatherCondition.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (w *WeatherCondition) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	neww, err := ParseWeatherCondition(b)
	if err != nil {
		return err
	}
	*w = neww
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for WeatherCondition.
// It returns the string representation of the enum value as a byte slice
func (w WeatherCondition) MarshalText() ([]byte, error) {
	return []byte("\"" + w.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for WeatherCondition.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (w *WeatherCondition) UnmarshalText(b []byte) error {
	neww, err := ParseWeatherCondition(b)
	if err != nil {
		return err
	}
	*w = neww
	return nil
}

// Scan implements the database/sql.Scanner interface for WeatherCondition.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (w *WeatherCondition) Scan(value any) error {
	neww, err := ParseWeatherCondition(value)
	if err != nil {
		return err
	}
	*w = neww
	return nil
}

// Value implements the database/sql/driver.Valuer interface for WeatherCondition.
// It returns the string representation of the enum value.
func (w WeatherCondition) Value() (driver.Value, error) {
	return w.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for WeatherCondition.
// It returns the binary representation of the enum value as a byte slice.
func (w WeatherCondition) MarshalBinary() ([]byte, error) {
	return []byte("\"" + w.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for WeatherCondition.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (w *WeatherCondition) UnmarshalBinary(b []byte) error {
	neww, err := ParseWeatherCondition(b)
	if err != nil {
		return err
	}
	*w = neww
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for WeatherCondition.
// It returns the string representation of the enum value.
func (w WeatherCondition) MarshalYAML() ([]byte, error) {
	return []byte(w.String()), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Planet.
// It parses the byte slice representation of the enum value and returns an error
// if the YAML byte slice does not contain a valid enum value.
func (w *WeatherCondition) UnmarshalYAML(b []byte) error {
	neww, err := ParseWeatherCondition(b)
	if err != nil {
		return err
	}
	*w = neww
	return nil
}

// weatherconditionNames is a constant string slice containing all enum values cononical absolute names
const weatherconditionNames = "thunderstormWithLightRainthunderstormWithRainthunderstormWithHeavyRainlightThunderstormthunderstormheavyThunderstormraggedThunderstormthunderstormWithLightDrizzlethunderstormWithDrizzlethunderstormWithHeavyDrizzlelightIntensityDrizzledrizzleheavyIntensityDrizzlelightIntensityDrizzleRaindrizzleRainshowerRainAndDrizzleheavyShowerRainAndDrizzleshowerDrizzlelightRainmoderateRainheavyIntensityRainveryHeavyRainextremeRainfreezingRainlightIntensityShowerRainshowerRainheavyIntensityShowerRainraggedShowerRainlightSnowsnowheavySnowsleetlightShowerSleetshowerSleetlightRainAndSnowrainAndSnowlightShowerSnowshowerSnowheavyShowerSnowmistsmokehazesandDustWhirlsfogsanddustvolcanicAshsquallstornadoclearfewCloudsscatteredCloudsbrokenCloudsovercastClouds"

// weatherconditionNamesMap is a map of enum values to their canonical absolute
// name positions within the weatherconditionNames string slice
var weatherconditionNamesMap = map[WeatherCondition]string{
	WeatherConditions.THUNDERSTORMWITHLIGHTRAIN:    weatherconditionNames[0:25],
	WeatherConditions.THUNDERSTORMWITHRAIN:         weatherconditionNames[25:45],
	WeatherConditions.THUNDERSTORMWITHHEAVYRAIN:    weatherconditionNames[45:70],
	WeatherConditions.LIGHTTHUNDERSTORM:            weatherconditionNames[70:87],
	WeatherConditions.THUNDERSTORM:                 weatherconditionNames[87:99],
	WeatherConditions.HEAVYTHUNDERSTORM:            weatherconditionNames[99:116],
	WeatherConditions.RAGGEDTHUNDERSTORM:           weatherconditionNames[116:134],
	WeatherConditions.THUNDERSTORMWITHLIGHTDRIZZLE: weatherconditionNames[134:162],
	WeatherConditions.THUNDERSTORMWITHDRIZZLE:      weatherconditionNames[162:185],
	WeatherConditions.THUNDERSTORMWITHHEAVYDRIZZLE: weatherconditionNames[185:213],
	WeatherConditions.LIGHTINTENSITYDRIZZLE:        weatherconditionNames[213:234],
	WeatherConditions.DRIZZLE:                      weatherconditionNames[234:241],
	WeatherConditions.HEAVYINTENSITYDRIZZLE:        weatherconditionNames[241:262],
	WeatherConditions.LIGHTINTENSITYDRIZZLERAIN:    weatherconditionNames[262:287],
	WeatherConditions.DRIZZLERAIN:                  weatherconditionNames[287:298],
	WeatherConditions.SHOWERRAINANDDRIZZLE:         weatherconditionNames[298:318],
	WeatherConditions.HEAVYSHOWERRAINANDDRIZZLE:    weatherconditionNames[318:343],
	WeatherConditions.SHOWERDRIZZLE:                weatherconditionNames[343:356],
	WeatherConditions.LIGHTRAIN:                    weatherconditionNames[356:365],
	WeatherConditions.MODERATERAIN:                 weatherconditionNames[365:377],
	WeatherConditions.HEAVYINTENSITYRAIN:           weatherconditionNames[377:395],
	WeatherConditions.VERYHEAVYRAIN:                weatherconditionNames[395:408],
	WeatherConditions.EXTREMERAIN:                  weatherconditionNames[408:419],
	WeatherConditions.FREEZINGRAIN:                 weatherconditionNames[419:431],
	WeatherConditions.LIGHTINTENSITYSHOWERRAIN:     weatherconditionNames[431:455],
	WeatherConditions.SHOWERRAIN:                   weatherconditionNames[455:465],
	WeatherConditions.HEAVYINTENSITYSHOWERRAIN:     weatherconditionNames[465:489],
	WeatherConditions.RAGGEDSHOWERRAIN:             weatherconditionNames[489:505],
	WeatherConditions.LIGHTSNOW:                    weatherconditionNames[505:514],
	WeatherConditions.SNOW:                         weatherconditionNames[514:518],
	WeatherConditions.HEAVYSNOW:                    weatherconditionNames[518:527],
	WeatherConditions.SLEET:                        weatherconditionNames[527:532],
	WeatherConditions.LIGHTSHOWERSLEET:             weatherconditionNames[532:548],
	WeatherConditions.SHOWERSLEET:                  weatherconditionNames[548:559],
	WeatherConditions.LIGHTRAINANDSNOW:             weatherconditionNames[559:575],
	WeatherConditions.RAINANDSNOW:                  weatherconditionNames[575:586],
	WeatherConditions.LIGHTSHOWERSNOW:              weatherconditionNames[586:601],
	WeatherConditions.SHOWERSNOW:                   weatherconditionNames[601:611],
	WeatherConditions.HEAVYSHOWERSNOW:              weatherconditionNames[611:626],
	WeatherConditions.MIST:                         weatherconditionNames[626:630],
	WeatherConditions.SMOKE:                        weatherconditionNames[630:635],
	WeatherConditions.HAZE:                         weatherconditionNames[635:639],
	WeatherConditions.SANDDUSTWHIRLS:               weatherconditionNames[639:653],
	WeatherConditions.FOG:                          weatherconditionNames[653:656],
	WeatherConditions.SAND:                         weatherconditionNames[656:660],
	WeatherConditions.DUST:                         weatherconditionNames[660:664],
	WeatherConditions.VOLCANICASH:                  weatherconditionNames[664:675],
	WeatherConditions.SQUALLS:                      weatherconditionNames[675:682],
	WeatherConditions.TORNADO:                      weatherconditionNames[682:689],
	WeatherConditions.CLEAR:                        weatherconditionNames[689:694],
	WeatherConditions.FEWCLOUDS:                    weatherconditionNames[694:703],
	WeatherConditions.SCATTEREDCLOUDS:              weatherconditionNames[703:718],
	WeatherConditions.BROKENCLOUDS:                 weatherconditionNames[718:730],
	WeatherConditions.OVERCASTCLOUDS:               weatherconditionNames[730:744],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (w WeatherCondition) String() string {
	if str, ok := weatherconditionNamesMap[w]; ok {
		return str
	}
	return fmt.Sprintf("weathercondition(%d)", w.weatherCondition)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [54]struct{}
	_ = x[thunderstormWithLightRain]
	_ = x[thunderstormWithRain-1]
	_ = x[thunderstormWithHeavyRain-2]
	_ = x[lightThunderstorm-3]
	_ = x[thunderstorm-4]
	_ = x[heavyThunderstorm-5]
	_ = x[raggedThunderstorm-6]
	_ = x[thunderstormWithLightDrizzle-7]
	_ = x[thunderstormWithDrizzle-8]
	_ = x[thunderstormWithHeavyDrizzle-9]
	_ = x[lightIntensityDrizzle-10]
	_ = x[drizzle-11]
	_ = x[heavyIntensityDrizzle-12]
	_ = x[lightIntensityDrizzleRain-13]
	_ = x[drizzleRain-14]
	_ = x[showerRainAndDrizzle-15]
	_ = x[heavyShowerRainAndDrizzle-16]
	_ = x[showerDrizzle-17]
	_ = x[lightRain-18]
	_ = x[moderateRain-19]
	_ = x[heavyIntensityRain-20]
	_ = x[veryHeavyRain-21]
	_ = x[extremeRain-22]
	_ = x[freezingRain-23]
	_ = x[lightIntensityShowerRain-24]
	_ = x[showerRain-25]
	_ = x[heavyIntensityShowerRain-26]
	_ = x[raggedShowerRain-27]
	_ = x[lightSnow-28]
	_ = x[snow-29]
	_ = x[heavySnow-30]
	_ = x[sleet-31]
	_ = x[lightShowerSleet-32]
	_ = x[showerSleet-33]
	_ = x[lightRainAndSnow-34]
	_ = x[rainAndSnow-35]
	_ = x[lightShowerSnow-36]
	_ = x[showerSnow-37]
	_ = x[heavyShowerSnow-38]
	_ = x[mist-39]
	_ = x[smoke-40]
	_ = x[haze-41]
	_ = x[sandDustWhirls-42]
	_ = x[fog-43]
	_ = x[sand-44]
	_ = x[dust-45]
	_ = x[volcanicAsh-46]
	_ = x[squalls-47]
	_ = x[tornado-48]
	_ = x[clear-49]
	_ = x[fewClouds-50]
	_ = x[scatteredClouds-51]
	_ = x[brokenClouds-52]
	_ = x[overcastClouds-53]
}
